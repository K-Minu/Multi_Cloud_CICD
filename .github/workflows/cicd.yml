name: Deploy to Amazon ECS and Azure Container App

on:
  push:
    branches:
      - master

env:
  # set this to your preferred AWS region, e.g. us-west-1
  AWS_REGION: ap-northeast-2
  # set this to your Amazon ECR repository name
  ECR_REPOSITORY: sdp_poc
  # set this to your Amazon ECS service name
  ECS_SERVICE: sdp-poc-application-service1
  # set this to your Amazon ECS cluster name
  ECS_CLUSTER: sdp-poc-application-cluster
  # set this to the name of the container in the containerDefinitions section of your task definition
  CONTAINER_NAME: sdp-poc-application-container
  # open id connect
  ROLE_ARN: arn:aws:iam::919188484580:role/sdp-poc-github-action-role
  # Azure Credential
  CONTAINER_REGISTRY: ${{ secrets.REGISTRY_URL }}

permissions:
  # This is required for requesting the JWT
  id-token: write
  # This is required for actions/checkout
  contents: read

jobs:
  build-and-deploy-to-azure:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@master

      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Build and push image
        id: build-image
        run: |
          az acr build --image sampleapp:${{ github.sha }} --registry ${{ env.CONTAINER_REGISTRY }} --file "Dockerfile" .

      - name: "Deploy to Azure Web App for Container"
        id: container-apps-deploy
        run: |
          az containerapp create -n sdp-test-app -g ${{ secrets.RESOURCE_GROUP }} --image ${{ env.CONTAINER_REGISTRY }}/sampleapp:${{ github.sha }} --environment sdp-test-env --ingress external --target-port 80 --registry-server ${{ env.CONTAINER_REGISTRY }} --registry-username ${{ secrets.REGISTRY_USERNAME }} --registry-password ${{ secrets.REGISTRY_PASSWORD }}

  build-and-deploy-to-aws:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions
          role-to-assume: ${{ env.ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest #${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition sdp-poc-application-task --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
