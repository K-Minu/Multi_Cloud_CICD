name: Image Build and Push to ECR and ACR

on:
  push:
    branches:
      - build_branch

env:
  # set this to your preferred AWS region, e.g. us-west-1
  AWS_REGION: ap-northeast-2
  # set this to your Amazon ECR repository name
  ECR_REPOSITORY: sdp_poc
  # open id connect
  ROLE_ARN: arn:aws:iam::919188484580:role/sdp-poc-github-action-role
  # Azure Credential
  CONTAINER_REGISTRY: ${{ secrets.REGISTRY_URL }}

permissions:
  # This is required for requesting the JWT
  id-token: write
  # This is required for actions/checkout
  contents: read

jobs:
  build-and-deploy-to-azure:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@master

      - name: Azure authentication
        uses: azure/actions/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR authentication
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Docker Build & push to ACR
        run: |
          docker build . -t ${{ env.CONTAINER_REGISTRY }}/myapp:${{ github.sha }}
          docker push ${{ env.CONTAINER_REGISTRY }}/myapp:${{ github.sha }}

  build-and-deploy-to-aws:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions
          role-to-assume: ${{ env.ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest #${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
